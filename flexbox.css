/*FLEX BOX CSS SNIPPETS all codes are called need to comment out a property to display what you needed*/

/*NOTE
 to stack them VERTICALLY -> FLEX-DIRECTION: COLUMN; to stack them HORIZONTALLY -> FLEX-DIRECTION: ROW;
 */

/* FLEX CONTAINER */
.flex-container{
    display:flex; /*Normal*/
    display:inline-flex; /*inline also the items container*/
   
    /* MAIN AXIS - FROM MAIN START TO END */
    /*Flex Flow Direction*/
    flex-direction: row; /*default*/
    flex-direction: row-reverse; /*reverse*/
    flex-direction: column; /*top to bottom direction*/
    flex-direction: column-reverse; /*reverse*/

    /* FLEX LINE WRAPPING */
    flex-wrap: nowrap; /*default*/
    flex-wrap: wrap; /*wrap items in rows*/
    flex-wrap: wrap-reverse; /*reverse*/

    /*FLEX FLOW COMBINATION OF DIRECTION AND WRAP*/
    flex-flow: column wrap;
}

/*ADDING FLEX GROW FACTOR*/
.flex-item {
    flex-grow: 1; /*flex items will grow the item equally fill the available space*/
}

/*ADDING DISPLAY ORDER */
/*the default value is start with 0 zero . It can be -1, 0, 1*/
.flex-item-04 {
    background-color: #2A9FBC;
    order: 1; /*this will put to the end order because it is the greatest value now*/

    /*trying to modify the flex-grow of this item*/
    flex-grow: 4;
}

/*Adding another value order*/
.flex-item-05 {
    background-color: #F15B2A; 
    order: 1; /*by having two 1 value this 5th item will move to the last order and the 4th value will 2nd to the last order*/
}


/*FLEX SHRINK FACTOR*/
/*add width:15em to the .flex-item class so that they will force to grow, this would make the items larger than the container since they are flex to fit the area evenly*/

.flex-item{

    width:15em;
}

.flex-item-01{
    flex-shrink:2; /*It will remove the spaces and divided to each other flex-item*/
     /*OR*/
    flex-shrink:0; /*Maintain the width of this item and shrink lower to the other items*/
}

/*INITIAL SIZE - flex-basis it's like flex itself*/
.flex-item-01{
    flex-basis: 10em; /*grow with 10em width and the other items is set to default*/
}
.flex-item{

   flex-grow: 1; /*now it occupies the spaces available but the because of flex-basis: 10em; on flex-item-01 this item has the larger occupied space then divided the space left/extra space to other items*/
}

/*SHORT HAND VERSION*/
/*FLEX: FLEX-GROW FLEX-SHRINK FLEX-BASIS;*/
.flex-container{
    width:50%; /*nothing works without adding width in the container*/
}
/*then*/
.flex-item{
    flex: 0 1 auto; /*this works by setting the width to 50% so it will occupies the space of the container width:50%; making shrink*/
    /*or test this*/
    flex: 0 0 auto; /*if this is applied all default but because of 50% width of the container in this is flex layout it will overflow the items to the container width 50% */
        /*or test this*/
    flex: 1 0 auto; /*if this is applied need to remove the width 50% of the container back to default then it making the flex layout grow and occupies the extra spaces of the container with default shrink and basis */
}

/*FLEX BOX ALIGNMENT*/

/*all of the items of the given container applied using JUSTIFY-CONTENT, ALIGN-ITEMS, ALIGN-CONTENT, or individual flex items with ALIGN-SELF property*/

/*JUSTIFY-CONTENT distributed by MAIN AXIS horizontally*/
.flex-container{
    /*row type*/
    justify-content: flex-start; /* default value*/
    justify-content: flex-end; /*move the the end main axis*/
    justify-content: center; /*move to the center horizontally  */

    /*column type*/
    flex-direction: column;
    justify-content: flex-start; /*become the cross axis, cross start*/
    justify-content: flex-end; /*become the cross axis, cross end moved*/
    justify-content: center; /*move to the center vertically*/

    justify-content: space-between; /* divided the white space extras to each item but the white space only inside not outside, outside will fill with the item content*/

    justify-content: space-around; /* works like adding margin to the left and right but the value is divided by extra space but the the main start and end have the lower space extras*/
}

/*ALIGN-ITEMS*/
/*distributed by CROSS AXIS vertically*/
.flex-container{
    align-items: flex-start; /* cross axis by cross start so that it display at the top*/
    align-items: flex-end; /*align the bottom*/

    align-items: center; /*vertical align center*/
    align-items: baseline;/*if we have text each item will line up*/
    align-items: stretch; /*Align items vertically stretch also Default Value*/
}

/*ALIGN-SELF individually*/
.flex-item-01{
    align-self: flex-start;  /*align itself top*/    align-self: flex-end;  /*align itself bottom*/
    align-self: stretch; /*stretch item itself*/  
}

/*ALIGN CONTENT*/
.flex-container{
align-content: flex-start; /*if the height of the items have extra space in example have bigger spaces at the bottom this align-content: flex-start; will occupied the extra space and making the top and bottom of the item center vertically and to the TOP*/

align-content: flex-end; /*if the height of the items have extra space in example have bigger spaces at the bottom this align-content: flex-start; will occupied the extra space and making the top and bottom of the item center vertically and to the BOTTOM*/

align-content: space-around; /*if the height of the items have extra space in example have bigger spaces at the bottom this align-content: flex-start; will occupied the extra space and making the top and bottom of the item center vertically and to the SPACE AROUND alignment*/

align-content: stretch; /*DEFAULT*/

}



/*REFER TO SCREENSHOTS REAL WORLD PROBLEMS FOLDER*/

/*OLDER APPROACH*/
/*ADD FLOAT, WIDTH, CLEAR to make two item for example in one column 50% each*/

/*WITH FLEX BOX SIMPLE GIVE VALUE OF 1 -> flex:1; */

/*then What if one side is longer than the other, and we want them to have the same height? We USED to have to add some sort of min height or something but not anymore FLEX BOX works the way we wanted too, even 2 3 4 columns just add flex:1;*/

/*REFER TO SCREENSHOTS REAL WORLD PROBLEMS FOLDER*/
